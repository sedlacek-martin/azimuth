<?php

/*
 * This file is part of the Cocorico package.
 *
 * (c) Cocolabs SAS <contact@cocolabs.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cocorico\MessageBundle\Repository;

use Cocorico\CoreBundle\Model\BaseListing;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use FOS\MessageBundle\Model\ParticipantInterface;
use FOS\UserBundle\Model\UserInterface;
use PDO;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    /**
     * Tells how many unread messages this participant has
     *
     * @param ParticipantInterface|UserInterface $participant
     * @return int the number of unread messages
     *
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function getNbUnreadMessage(ParticipantInterface $participant)
    {
        $builder = $this->createQueryBuilder('m');

        $builder
            ->innerJoin('m.metadata', 'mm')
            ->innerJoin('mm.participant', 'p')
            ->where('p.id = :participant_id')
            ->andWhere('m.sender != :sender')
            ->andWhere('mm.isRead = :isRead')
            ->andWhere('m.verified = :isVerified')
            ->setParameter('participant_id', $participant->getId())
            ->setParameter('sender', $participant->getId())
            ->setParameter('isVerified', true, PDO::PARAM_BOOL)
            ->setParameter('isRead', false, PDO::PARAM_BOOL);

        $builder->select($builder->expr()->count('mm.id'));

        $query = $builder->getQuery();
        $query->useResultCache(true, 3600, 'getNbUnreadMessage' . $participant->getId());

        return $query->getSingleScalarResult();
    }

    /**
     * @param $userId
     */
    public function clearNbUnreadMessageCache($userId)
    {
        $resultCache = $this->getEntityManager()->getConfiguration()->getResultCacheImpl();
        $resultCache->delete('getNbUnreadMessage' . $userId);
    }

    /**
     * @param int|null $moId
     * @return int
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function getWaitingForValidationCount(int $moId = null): int
    {
        $qb = $this->createQueryBuilder('m')
            ->select('COUNT(m.id) as cnt')
            ->where('m.verified = 0');

        if ($moId) {
            $qb
                ->leftJoin('m.sender', 'u')
                ->leftJoin('u.memberOrganization', 'mo')
                ->andWhere('mo.id = :moId')
                ->setParameter('moId', $moId);
        }
        $result = $qb->getQuery()->getSingleResult();
        return $result['cnt'];
    }

    /**
     * @param \DateTime $from
     * @param \DateTime $to
     * @return array
     */
    public function getWaitingForValidationCountByMo(\DateTime $from, \DateTime $to): array
    {
        $qb = $this->createQueryBuilder('m')
            ->leftJoin('m.sender', 'u')
            ->leftJoin('u.memberOrganization', 'mo')
            ->select('COUNT(m.id) as cnt, mo.id as mo_id')
            ->where('m.verified = 0')
            ->andWhere('u.createdAt >= :from')
            ->andWhere('u.createdAt <= :to')
            ->groupBy('mo.id')
            ->setParameter('from', $from)
            ->setParameter('to', $to);

        $result = $qb->getQuery()->getResult();

        return $result;

    }

    /**
     * @param \DateTime|null $from
     * @param \DateTime|null $to
     * @return int
     * @throws NoResultException
     */
    public function countAll(\DateTime $from = null, \DateTime $to = null): int
    {
        $qb = $this->createQueryBuilder('msg')
            ->select('COUNT(msg.id) as cnt');

        if ($from) {
            $qb->andWhere('msg.createdAt > :from')
                ->setParameter('from', $from->format('Y-m-d H:i:s'));
        }

        if ($to) {
            $qb->andWhere('msg.createdAt < :to')
                ->setParameter('to', $to->format('Y-m-d H:i:s'));
        }

        $result = $qb->getQuery()->getSingleResult();
        return $result['cnt'];
    }
}
